@inject AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject UserState UserState
@using EventAppClient.Pages

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""></a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="eventlist">
                <span class="bi bi-calendar2-event" aria-hidden="true"></span> Events
            </NavLink>
        </div>
        @if (!string.IsNullOrEmpty(UserState.Username))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="createevent">
                    <span class="bi bi-plus-circle" aria-hidden="true"></span> Create Event
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="my-events">
                    <span class="bi bi-calendar-plus" aria-hidden="true"></span> My Events
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="todo">
                    <span class="bi bi-bookmark" aria-hidden="true"></span> Saved Events
                </NavLink>
            </div>
            @if (UserState.Role == "Admin")
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="eventtypelist">
                        <span class="bi bi-kanban-fill-nav-menu" aria-hidden="true"></span> Manage Event Type
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="tickettypelist">
                        <span class="bi bi-kanban-fill-nav-menu" aria-hidden="true"></span> Manage Ticket Type
                    </NavLink>
                </div>
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="todo">
                    <span class="bi bi-bookmark-star" aria-hidden="true"></span> Experienced Events
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="settings">
                <span class="bi bi-gear" aria-hidden="true"></span> Settings
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="help">
                <span class="bi bi-info-circle" aria-hidden="true"></span> Help
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to UserState changes
        UserState.OnChange += StateHasChanged;
        // Check if token exists and set the authorization header
        var token = await AuthenticationService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            AuthenticationService.SetAuthorizationHeader(token);
            // Get and set the username and role based on the token
            var userDetails = await AuthenticationService.GetUserDetailsAsync();
            if (!string.IsNullOrEmpty(userDetails.Username))
            {
                UserState.Username = userDetails.Username;
                UserState.Role = userDetails.Role;
            }
        }
    }
}
