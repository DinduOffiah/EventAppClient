@inherits LayoutComponentBase
@inject AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject UserState UserState
@using EventAppClient.Pages

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex justify-content-between">
            <div class="text-center w-100 text-white">
                <h4>EventAppClient</h4>
            </div>

            <div>
                @if (string.IsNullOrEmpty(UserState.Username))
                {
                    <a class="text-signin" style="text-decoration:none" href="/login">Sign In</a>
                }
                else
                {
                    <a class="text-signin" style="text-decoration:none">Welcome, @UserState.Username</a>
                    @* <button @onclick="Logout">Logout</button> *@
                }
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to UserState changes
        UserState.OnChange += StateHasChanged;

        // Check if token exists and set the authorization header
        var token = await AuthenticationService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            AuthenticationService.SetAuthorizationHeader(token);

            // Get and set the username based on the token
            var username = await AuthenticationService.GetUsernameAsync();
            if (!string.IsNullOrEmpty(username))
            {
                UserState.Username = username;
            }
        }
    }

    private async Task Logout()
    {
        // Call the logout method in the service
        await AuthenticationService.LogoutAsync();
        // Redirect to login page
        NavigationManager.NavigateTo("/login");
    }

    public void Dispose()
    {
        // Unsubscribe from event when component is disposed
        UserState.OnChange -= StateHasChanged;
    }
}
